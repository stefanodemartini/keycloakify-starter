{"version":3,"file":"static/js/2814.caee338c.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/tools/emailRegExp.ts","../node_modules/keycloakify/src/lib/pages/shared/UserProfileCommons.tsx"],"sourcesContent":["export const emailRegexp =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","import \"../../tools/Array.prototype.every\";\nimport React, { useEffect, useMemo, useReducer, Fragment } from \"react\";\nimport type { KcProps } from \"../../KcProps\";\nimport type { KcContextBase, Validators, Attribute } from \"../../getKcContext\";\nimport { clsx } from \"../../tools/clsx\";\nimport { useConstCallback } from \"../../tools/useConstCallback\";\nimport { emailRegexp } from \"../../tools/emailRegExp\";\nimport type { I18nBase, MessageKeyBase } from \"../../i18n\";\nimport { id } from \"tsafe/id\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18nBase;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", (props: { attribute: Attribute }) => JSX.Element | null>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport function UserProfileFormFields({\n    kcContext,\n    onIsFormSubmittableValueChange,\n    i18n,\n    BeforeField,\n    AfterField,\n    ...props\n}: UserProfileFormFieldsProps) {\n    const { advancedMsg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={clsx(props.kcContentWrapperClass)}>\n                                    <label id={`header-${group}`} className={clsx(props.kcFormGroupHeader)}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={clsx(props.kcLabelWrapperClass)}>\n                                        <label id={`description-${group}`} className={`${clsx(props.kcLabelClass)}`}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={clsx(props.kcLabelWrapperClass)}>\n                                <label htmlFor={attribute.name} className={clsx(props.kcLabelClass)}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={clsx(props.kcInputWrapperClass)}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                {options.options.map(option => (\n                                                    <option key={option} value={option}>\n                                                        {option}\n                                                    </option>\n                                                ))}\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={clsx(props.kcInputClass)}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={clsx(props.kcInputErrorMessageClass)}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}\n\n/**\n * NOTE: The attributesWithPassword returned is actually augmented with\n * artificial password related attributes only if kcContext.passwordRequired === true\n */\nexport function useFormValidation(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContextBase.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: Attribute[];\n        };\n        passwordRequired?: boolean;\n        realm: { registrationEmailAsUsername: boolean };\n    };\n    /** NOTE: Try to avoid passing a new ref every render for better performances. */\n    passwordValidators?: Validators;\n    i18n: I18nBase;\n}) {\n    const {\n        kcContext,\n        passwordValidators = {\n            \"length\": {\n                \"ignore.empty.value\": true,\n                \"min\": \"4\"\n            }\n        },\n        i18n\n    } = params;\n\n    const attributesWithPassword = useMemo(\n        () =>\n            !kcContext.passwordRequired\n                ? kcContext.profile.attributes\n                : (() => {\n                      const name = kcContext.realm.registrationEmailAsUsername ? \"email\" : \"username\";\n\n                      return kcContext.profile.attributes.reduce<Attribute[]>(\n                          (prev, curr) => [\n                              ...prev,\n                              ...(curr.name !== name\n                                  ? [curr]\n                                  : [\n                                        curr,\n                                        id<Attribute>({\n                                            \"name\": \"password\",\n                                            \"displayName\": id<`\\${${MessageKeyBase}}`>(\"${password}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": passwordValidators,\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        }),\n                                        id<Attribute>({\n                                            \"name\": \"password-confirm\",\n                                            \"displayName\": id<`\\${${MessageKeyBase}}`>(\"${passwordConfirm}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": {\n                                                \"_compareToOther\": {\n                                                    \"name\": \"password\",\n                                                    \"ignore.empty.value\": true,\n                                                    \"shouldBe\": \"equal\",\n                                                    \"error-message\": id<`\\${${MessageKeyBase}}`>(\"${invalidPasswordConfirmMessage}\")\n                                                }\n                                            },\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        })\n                                    ])\n                          ],\n                          []\n                      );\n                  })(),\n        [kcContext, passwordValidators]\n    );\n\n    const { getErrors } = useGetErrors({\n        \"kcContext\": {\n            \"messagesPerField\": kcContext.messagesPerField,\n            \"profile\": {\n                \"attributes\": attributesWithPassword\n            }\n        },\n        i18n\n    });\n\n    const initialInternalState = useMemo(\n        () =>\n            Object.fromEntries(\n                attributesWithPassword\n                    .map(attribute => ({\n                        attribute,\n                        \"errors\": getErrors({\n                            \"name\": attribute.name,\n                            \"fieldValueByAttributeName\": Object.fromEntries(\n                                attributesWithPassword.map(({ name, value }) => [name, { \"value\": value ?? \"\" }])\n                            )\n                        })\n                    }))\n                    .map(({ attribute, errors }) => [\n                        attribute.name,\n                        {\n                            \"value\": attribute.value ?? \"\",\n                            errors,\n                            \"doDisplayPotentialErrorMessages\": errors.length !== 0\n                        }\n                    ])\n            ),\n        [attributesWithPassword]\n    );\n\n    type InternalState = typeof initialInternalState;\n\n    const [formValidationInternalState, formValidationDispatch] = useReducer(\n        (\n            state: InternalState,\n            params:\n                | {\n                      action: \"update value\";\n                      name: string;\n                      newValue: string;\n                  }\n                | {\n                      action: \"focus lost\";\n                      name: string;\n                  }\n        ): InternalState => ({\n            ...state,\n            [params.name]: {\n                ...state[params.name],\n                ...(() => {\n                    switch (params.action) {\n                        case \"focus lost\":\n                            return { \"doDisplayPotentialErrorMessages\": true };\n                        case \"update value\":\n                            return {\n                                \"value\": params.newValue,\n                                \"errors\": getErrors({\n                                    \"name\": params.name,\n                                    \"fieldValueByAttributeName\": {\n                                        ...state,\n                                        [params.name]: { \"value\": params.newValue }\n                                    }\n                                })\n                            };\n                    }\n                })()\n            }\n        }),\n        initialInternalState\n    );\n\n    const formValidationState = useMemo(\n        () => ({\n            \"fieldStateByAttributeName\": Object.fromEntries(\n                Object.entries(formValidationInternalState).map(([name, { value, errors, doDisplayPotentialErrorMessages }]) => [\n                    name,\n                    { value, \"displayableErrors\": doDisplayPotentialErrorMessages ? errors : [] }\n                ])\n            ),\n            \"isFormSubmittable\": Object.entries(formValidationInternalState).every(\n                ([name, { value, errors }]) =>\n                    errors.length === 0 && (value !== \"\" || !attributesWithPassword.find(attribute => attribute.name === name)!.required)\n            )\n        }),\n        [formValidationInternalState, attributesWithPassword]\n    );\n\n    return {\n        formValidationState,\n        formValidationDispatch,\n        attributesWithPassword\n    };\n}\n\n/** Expect to be used in a component wrapped within a <I18nProvider> */\nfunction useGetErrors(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContextBase.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: { name: string; value?: string; validators: Validators }[];\n        };\n    };\n    i18n: I18nBase;\n}) {\n    const { kcContext, i18n } = params;\n\n    const {\n        messagesPerField,\n        profile: { attributes }\n    } = kcContext;\n\n    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;\n\n    const getErrors = useConstCallback((params: { name: string; fieldValueByAttributeName: Record<string, { value: string }> }) => {\n        const { name, fieldValueByAttributeName } = params;\n\n        const { value } = fieldValueByAttributeName[name];\n\n        const { value: defaultValue, validators } = attributes.find(attribute => attribute.name === name)!;\n\n        block: {\n            if (defaultValue !== value) {\n                break block;\n            }\n\n            let doesErrorExist: boolean;\n\n            try {\n                doesErrorExist = messagesPerField.existsError(name);\n            } catch {\n                break block;\n            }\n\n            if (!doesErrorExist) {\n                break block;\n            }\n\n            const errorMessageStr = messagesPerField.get(name);\n\n            return [\n                {\n                    \"validatorName\": undefined,\n                    errorMessageStr,\n                    \"errorMessage\": <span key={0}>{errorMessageStr}</span>\n                }\n            ];\n        }\n\n        const errors: {\n            errorMessage: JSX.Element;\n            errorMessageStr: string;\n            validatorName: keyof Validators | undefined;\n        }[] = [];\n\n        scope: {\n            const validatorName = \"length\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (max !== undefined && value.length > parseInt(max)) {\n                const msgArgs = [\"error-invalid-length-too-long\", max] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n\n            if (min !== undefined && value.length < parseInt(min)) {\n                const msgArgs = [\"error-invalid-length-too-short\", min] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n        }\n\n        scope: {\n            const validatorName = \"_compareToOther\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, name: otherName, shouldBe, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const { value: otherValue } = fieldValueByAttributeName[otherName];\n\n            const isValid = (() => {\n                switch (shouldBe) {\n                    case \"different\":\n                        return otherValue !== value;\n                    case \"equal\":\n                        return otherValue === value;\n                }\n            })();\n\n            if (isValid) {\n                break scope;\n            }\n\n            const msgArg = [\n                errorMessageKey ??\n                    id<MessageKeyBase>(\n                        (() => {\n                            switch (shouldBe) {\n                                case \"equal\":\n                                    return \"shouldBeEqual\";\n                                case \"different\":\n                                    return \"shouldBeDifferent\";\n                            }\n                        })()\n                    ),\n                otherName,\n                name,\n                shouldBe\n            ] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArg)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArg)\n            });\n        }\n\n        scope: {\n            const validatorName = \"pattern\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, pattern, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (new RegExp(pattern).test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [errorMessageKey ?? id<MessageKeyBase>(\"shouldMatchPattern\"), pattern] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            if ([...errors].reverse()[0]?.validatorName === \"pattern\") {\n                break scope;\n            }\n\n            const validatorName = \"email\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (emailRegexp.test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKeyBase>(\"invalidEmailMessage\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": msgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            const validatorName = \"integer\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const intValue = parseInt(value);\n\n            if (isNaN(intValue)) {\n                const msgArgs = [\"mustBeAnInteger\"] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (max !== undefined && intValue > parseInt(max)) {\n                const msgArgs = [\"error-number-out-of-range-too-big\", max] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (min !== undefined && intValue < parseInt(min)) {\n                const msgArgs = [\"error-number-out-of-range-too-small\", min] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n        }\n\n        scope: {\n            const validatorName = \"options\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            if (value === \"\") {\n                break scope;\n            }\n\n            if (validator.options.indexOf(value) >= 0) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKeyBase>(\"notAValidOption\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        //TODO: Implement missing validators.\n\n        return errors;\n    });\n\n    return { getErrors };\n}\n"],"names":["emailRegexp","UserProfileFormFields","_a","kcContext","onIsFormSubmittableValueChange","i18n","BeforeField","AfterField","props","__rest","advancedMsg","useFormValidation","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useEffect","currentGroup","React","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","name","value","displayableErrors","formGroupClassName","clsx","kcFormGroupClass","length","kcFormGroupErrorClass","Fragment","key","className","kcContentWrapperClass","id","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","undefined","onChange","event","target","onBlur","option","type","kcInputClass","disabled","readOnly","autoComplete","autocomplete","divId","kcInputErrorMessageClass","style","errorMessage","params","passwordValidators","useMemo","passwordRequired","realm","registrationEmailAsUsername","profile","attributes","reduce","prev","curr","messagesPerField","msg","msgStr","advancedMsgStr","getErrors","useConstCallback","fieldValueByAttributeName","find","defaultValue","block","doesErrorExist","existsError","errorMessageStr","get","errors","validatorName","validator","ignoreEmptyValue","max","min","parseInt","msgArgs","push","otherName","shouldBe","errorMessageKey","otherValue","msgArg","pattern","RegExp","test","reverse","intValue","isNaN","indexOf","useGetErrors","initialInternalState","Object","fromEntries","useReducer","state","action","newValue","formValidationInternalState","entries","doDisplayPotentialErrorMessages","every"],"sourceRoot":""}