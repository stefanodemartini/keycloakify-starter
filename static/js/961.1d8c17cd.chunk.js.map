{"version":3,"file":"static/js/961.1d8c17cd.chunk.js","mappings":"ghBAMc,SAAUA,EAAmBC,GACvC,IAAQC,EAA+ED,EAA/EC,UAAWC,EAAoEF,EAApEE,KAAnB,EAAuFF,EAA9DG,6BAAAA,OAAzB,SAA8DC,EAAyBJ,EAAzBI,SAAaC,EAAOC,EAAKN,EAAjF,gEAEEO,EAAqBN,EAArBM,IAAKC,EAAgBP,EAAhBO,MAAOC,EAASR,EAATQ,KAEZC,EAAgBR,EAAhBQ,IAAKC,EAAWT,EAAXS,OAEb,OACIC,EAAAA,cAACR,EAAQS,OAAAA,OAAAA,CAAAA,EAAAA,OAAAA,OAAAA,CACCZ,UAAAA,EAAWC,KAAAA,EAAMC,6BAAAA,GAAiCE,GAAO,CAC/DS,gBAAgB,EAChBC,WAAYL,EAAI,oBAChBM,SACIJ,EAAAA,cAAAA,OAAAA,CAAMK,GAAG,yBAAyBC,WAAWC,EAAAA,EAAAA,GAAKd,EAAQe,aAAcC,OAAQd,EAAIe,YAAaC,OAAO,QACpGX,EAAAA,cAAAA,MAAAA,CAAKM,WAAWC,EAAAA,EAAAA,GAAKd,EAAQmB,mBACzBZ,EAAAA,cAAAA,MAAAA,CAAKM,WAAWC,EAAAA,EAAAA,GAAKd,EAAQoB,sBACzBb,EAAAA,cAAAA,QAAAA,CAAOc,QAAQ,WAAWR,WAAWC,EAAAA,EAAAA,GAAKd,EAAQsB,eAC5CnB,EAAMoB,sBAEDpB,EAAMqB,4BAEPnB,EAAI,SADJA,EAAI,mBAFJA,EAAI,cAMlBE,EAAAA,cAAAA,MAAAA,CAAKM,WAAWC,EAAAA,EAAAA,GAAKd,EAAQyB,sBACzBlB,EAAAA,cAAAA,QAAAA,CACImB,KAAK,OACLd,GAAG,WACHe,KAAK,WACLd,WAAWC,EAAAA,EAAAA,GAAKd,EAAQ4B,cACxBC,WAAS,EACTC,kBAAuBC,IAAT3B,GAAsBA,EAAK4B,aAAe5B,EAAK6B,uBAAoBF,MAI7FxB,EAAAA,cAAAA,MAAAA,CAAKM,WAAWC,EAAAA,EAAAA,GAAKd,EAAQmB,iBAAkBnB,EAAQkC,qBACnD3B,EAAAA,cAAAA,MAAAA,CAAKK,GAAG,kBAAkBC,WAAWC,EAAAA,EAAAA,GAAKd,EAAQmC,qBAC9C5B,EAAAA,cAAAA,MAAAA,CAAKM,WAAWC,EAAAA,EAAAA,GAAKd,EAAQoC,4BACzB7B,EAAAA,cAAAA,OAAAA,KACIA,EAAAA,cAAAA,IAAAA,CAAG8B,KAAMnC,EAAIoC,UAAWjC,EAAI,mBAKxCE,EAAAA,cAAAA,MAAAA,CAAKK,GAAG,kBAAkBC,WAAWC,EAAAA,EAAAA,GAAKd,EAAQuC,qBAC9ChC,EAAAA,cAAAA,QAAAA,CACIM,WAAWC,EAAAA,EAAAA,GACPd,EAAQwC,cACRxC,EAAQyC,qBACRzC,EAAQ0C,mBACR1C,EAAQ2C,oBAEZjB,KAAK,SACLkB,MAAOtC,EAAO,iBAMlCuC,SAAUxC,EAAI,sBAGzB,C","sources":["../node_modules/keycloakify/src/lib/pages/LoginResetPassword.tsx"],"sourcesContent":["import React from \"react\";\nimport { clsx } from \"../tools/clsx\";\nimport type { PageProps } from \"../KcProps\";\nimport type { KcContextBase } from \"../getKcContext\";\nimport type { I18nBase } from \"../i18n\";\n\nexport default function LoginResetPassword(props: PageProps<Extract<KcContextBase, { pageId: \"login-reset-password.ftl\" }>, I18nBase>) {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template, ...kcProps } = props;\n\n    const { url, realm, auth } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            displayMessage={false}\n            headerNode={msg(\"emailForgotTitle\")}\n            formNode={\n                <form id=\"kc-reset-password-form\" className={clsx(kcProps.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <div className={clsx(kcProps.kcFormGroupClass)}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"username\" className={clsx(kcProps.kcLabelClass)}>\n                                {!realm.loginWithEmailAllowed\n                                    ? msg(\"username\")\n                                    : !realm.registrationEmailAsUsername\n                                    ? msg(\"usernameOrEmail\")\n                                    : msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"username\"\n                                name=\"username\"\n                                className={clsx(kcProps.kcInputClass)}\n                                autoFocus\n                                defaultValue={auth !== undefined && auth.showUsername ? auth.attemptedUsername : undefined}\n                            />\n                        </div>\n                    </div>\n                    <div className={clsx(kcProps.kcFormGroupClass, kcProps.kcFormSettingClass)}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={clsx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n            infoNode={msg(\"emailInstruction\")}\n        />\n    );\n}\n"],"names":["LoginResetPassword","props","kcContext","i18n","doFetchDefaultThemeResources","Template","kcProps","__rest","url","realm","auth","msg","msgStr","React","Object","displayMessage","headerNode","formNode","id","className","clsx","kcFormClass","action","loginAction","method","kcFormGroupClass","kcLabelWrapperClass","htmlFor","kcLabelClass","loginWithEmailAllowed","registrationEmailAsUsername","kcInputWrapperClass","type","name","kcInputClass","autoFocus","defaultValue","undefined","showUsername","attemptedUsername","kcFormSettingClass","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","infoNode"],"sourceRoot":""}