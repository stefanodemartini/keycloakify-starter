{"version":3,"file":"static/js/4901.aad2dec5.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/pages/Login.tsx"],"sourcesContent":["import React, { useState, type FormEventHandler } from \"react\";\nimport { clsx } from \"../tools/clsx\";\nimport { useConstCallback } from \"../tools/useConstCallback\";\nimport type { PageProps } from \"../KcProps\";\nimport type { KcContextBase } from \"../getKcContext\";\nimport type { I18nBase } from \"../i18n\";\n\nexport default function Login(props: PageProps<Extract<KcContextBase, { pageId: \"login.ftl\" }>, I18nBase>) {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template, ...kcProps } = props;\n\n    const { social, realm, url, usernameEditDisabled, login, auth, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            formNode={\n                <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && kcProps.kcContentWrapperClass)}>\n                    <div\n                        id=\"kc-form-wrapper\"\n                        className={clsx(\n                            realm.password && social.providers && [kcProps.kcFormSocialAccountContentClass, kcProps.kcFormSocialAccountClass]\n                        )}\n                    >\n                        {realm.password && (\n                            <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                                <div className={clsx(kcProps.kcFormGroupClass)}>\n                                    {(() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                            ? \"email\"\n                                            : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <>\n                                                <label htmlFor={autoCompleteHelper} className={clsx(kcProps.kcLabelClass)}>\n                                                    {msg(label)}\n                                                </label>\n                                                <input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={clsx(kcProps.kcInputClass)}\n                                                    //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                    //the browser how to pre fill the form but before submit we put it back\n                                                    //to username because it is what keycloak expects.\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    {...(usernameEditDisabled\n                                                        ? { \"disabled\": true }\n                                                        : {\n                                                              \"autoFocus\": true,\n                                                              \"autoComplete\": \"off\"\n                                                          })}\n                                                />\n                                            </>\n                                        );\n                                    })()}\n                                </div>\n                                <div className={clsx(kcProps.kcFormGroupClass)}>\n                                    <label htmlFor=\"password\" className={clsx(kcProps.kcLabelClass)}>\n                                        {msg(\"password\")}\n                                    </label>\n                                    <input\n                                        tabIndex={2}\n                                        id=\"password\"\n                                        className={clsx(kcProps.kcInputClass)}\n                                        name=\"password\"\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                    />\n                                </div>\n                                <div className={clsx(kcProps.kcFormGroupClass, kcProps.kcFormSettingClass)}>\n                                    <div id=\"kc-form-options\">\n                                        {realm.rememberMe && !usernameEditDisabled && (\n                                            <div className=\"checkbox\">\n                                                <label>\n                                                    <input\n                                                        tabIndex={3}\n                                                        id=\"rememberMe\"\n                                                        name=\"rememberMe\"\n                                                        type=\"checkbox\"\n                                                        {...(login.rememberMe\n                                                            ? {\n                                                                  \"checked\": true\n                                                              }\n                                                            : {})}\n                                                    />\n                                                    {msg(\"rememberMe\")}\n                                                </label>\n                                            </div>\n                                        )}\n                                    </div>\n                                    <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\n                                        {realm.resetPasswordAllowed && (\n                                            <span>\n                                                <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                    {msg(\"doForgotPassword\")}\n                                                </a>\n                                            </span>\n                                        )}\n                                    </div>\n                                </div>\n                                <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormGroupClass)}>\n                                    <input\n                                        type=\"hidden\"\n                                        id=\"id-hidden-input\"\n                                        name=\"credentialId\"\n                                        {...(auth?.selectedCredential !== undefined\n                                            ? {\n                                                  \"value\": auth.selectedCredential\n                                              }\n                                            : {})}\n                                    />\n                                    <input\n                                        tabIndex={4}\n                                        className={clsx(\n                                            kcProps.kcButtonClass,\n                                            kcProps.kcButtonPrimaryClass,\n                                            kcProps.kcButtonBlockClass,\n                                            kcProps.kcButtonLargeClass\n                                        )}\n                                        name=\"login\"\n                                        id=\"kc-login\"\n                                        type=\"submit\"\n                                        value={msgStr(\"doLogIn\")}\n                                        disabled={isLoginButtonDisabled}\n                                    />\n                                </div>\n                            </form>\n                        )}\n                    </div>\n                    {realm.password && social.providers !== undefined && (\n                        <div id=\"kc-social-providers\" className={clsx(kcProps.kcFormSocialAccountContentClass, kcProps.kcFormSocialAccountClass)}>\n                            <ul\n                                className={clsx(\n                                    kcProps.kcFormSocialAccountListClass,\n                                    social.providers.length > 4 && kcProps.kcFormSocialAccountDoubleListClass\n                                )}\n                            >\n                                {social.providers.map(p => (\n                                    <li key={p.providerId} className={clsx(kcProps.kcFormSocialAccountListLinkClass)}>\n                                        <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\n                                            <span>{p.displayName}</span>\n                                        </a>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                </div>\n            }\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        />\n    );\n}\n"],"names":["Login","props","kcContext","i18n","doFetchDefaultThemeResources","Template","kcProps","__rest","social","realm","url","usernameEditDisabled","login","auth","registrationDisabled","msg","msgStr","useState","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","preventDefault","formElement","target","querySelector","_a","setAttribute","submit","React","Object","displayInfo","displayWide","password","undefined","providers","headerNode","formNode","id","className","clsx","kcContentWrapperClass","kcFormSocialAccountContentClass","kcFormSocialAccountClass","action","loginAction","method","kcFormGroupClass","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","kcLabelClass","tabIndex","kcInputClass","name","defaultValue","username","type","autoComplete","kcFormSettingClass","rememberMe","kcFormOptionsWrapperClass","resetPasswordAllowed","href","loginResetCredentialsUrl","selectedCredential","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","disabled","kcFormSocialAccountListClass","length","kcFormSocialAccountDoubleListClass","map","p","key","providerId","kcFormSocialAccountListLinkClass","loginUrl","alias","displayName","infoNode","registrationAllowed","registrationUrl"],"sourceRoot":""}