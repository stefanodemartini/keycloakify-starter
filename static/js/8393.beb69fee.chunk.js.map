{"version":3,"file":"static/js/8393.beb69fee.chunk.js","mappings":"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","sources":["keycloak-theme/pages/shared/UserProfileCommons.tsx","keycloak-theme/pages/RegisterUserProfile.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["//NOTE: Copy pasted from: https://github.com/InseeFrLab/keycloakify/blob/main/src/lib/pages/shared/UserProfileCommons.tsx\r\n\r\nimport { useEffect, Fragment } from \"react\";\r\nimport type { KcProps } from \"keycloakify/lib/KcProps\";\r\nimport { clsx } from \"keycloakify/lib/tools/clsx\";\r\nimport type { I18nBase } from \"keycloakify/lib/i18n\";\r\nimport type { Attribute } from \"keycloakify/lib/getKcContext\";\r\nimport { useFormValidation } from \"keycloakify/lib/pages/shared/UserProfileCommons\";\r\n\r\nexport type UserProfileFormFieldsProps = {\r\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\r\n    i18n: I18nBase;\r\n} & KcProps &\r\n    Partial<Record<\"BeforeField\" | \"AfterField\", (props: { attribute: Attribute }) => JSX.Element | null>> & {\r\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\r\n    };\r\n\r\nexport function UserProfileFormFields({\r\n    kcContext,\r\n    onIsFormSubmittableValueChange,\r\n    i18n,\r\n    BeforeField,\r\n    AfterField,\r\n    ...props\r\n}: UserProfileFormFieldsProps) {\r\n    const { advancedMsg } = i18n;\r\n\r\n    const {\r\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\r\n        formValidationDispatch,\r\n        attributesWithPassword\r\n    } = useFormValidation({\r\n        kcContext,\r\n        i18n\r\n    });\r\n\r\n    useEffect(() => {\r\n        onIsFormSubmittableValueChange(isFormSubmittable);\r\n    }, [isFormSubmittable]);\r\n\r\n    let currentGroup = \"\";\r\n\r\n    return (\r\n        <>\r\n            {attributesWithPassword.map((attribute, i) => {\r\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\r\n\r\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\r\n\r\n                const formGroupClassName = clsx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\r\n\r\n                return (\r\n                    <Fragment key={i}>\r\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\r\n                            <div className={formGroupClassName}>\r\n                                <div className={clsx(props.kcContentWrapperClass)}>\r\n                                    <label id={`header-${group}`} className={clsx(props.kcFormGroupHeader)}>\r\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\r\n                                    </label>\r\n                                </div>\r\n                                {groupDisplayDescription !== \"\" && (\r\n                                    <div className={clsx(props.kcLabelWrapperClass)}>\r\n                                        <label id={`description-${group}`} className={`${clsx(props.kcLabelClass)}`}>\r\n                                            {advancedMsg(groupDisplayDescription)}\r\n                                        </label>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n\r\n                        {BeforeField && <BeforeField attribute={attribute} />}\r\n\r\n                        <div className={formGroupClassName}>\r\n                            <div className={clsx(props.kcLabelWrapperClass)}>\r\n                                <label htmlFor={attribute.name} className={clsx(props.kcLabelClass)}>\r\n                                    {advancedMsg(attribute.displayName ?? \"\")}\r\n                                </label>\r\n                                {attribute.required && <>*</>}\r\n                            </div>\r\n                            <div className={clsx(props.kcInputWrapperClass)}>\r\n                                {(() => {\r\n                                    const { options } = attribute.validators;\r\n\r\n                                    if (options !== undefined) {\r\n                                        return (\r\n                                            <select\r\n                                                id={attribute.name}\r\n                                                name={attribute.name}\r\n                                                onChange={event =>\r\n                                                    formValidationDispatch({\r\n                                                        \"action\": \"update value\",\r\n                                                        \"name\": attribute.name,\r\n                                                        \"newValue\": event.target.value\r\n                                                    })\r\n                                                }\r\n                                                onBlur={() =>\r\n                                                    formValidationDispatch({\r\n                                                        \"action\": \"focus lost\",\r\n                                                        \"name\": attribute.name\r\n                                                    })\r\n                                                }\r\n                                                value={value}\r\n                                            >\r\n                                                {options.options.map(option => (\r\n                                                    <option key={option} value={option}>\r\n                                                        {option}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </select>\r\n                                        );\r\n                                    }\r\n\r\n                                    return (\r\n                                        <input\r\n                                            type={(() => {\r\n                                                switch (attribute.name) {\r\n                                                    case \"password-confirm\":\r\n                                                    case \"password\":\r\n                                                        return \"password\";\r\n                                                    default:\r\n                                                        return \"text\";\r\n                                                }\r\n                                            })()}\r\n                                            id={attribute.name}\r\n                                            name={attribute.name}\r\n                                            value={value}\r\n                                            onChange={event =>\r\n                                                formValidationDispatch({\r\n                                                    \"action\": \"update value\",\r\n                                                    \"name\": attribute.name,\r\n                                                    \"newValue\": event.target.value\r\n                                                })\r\n                                            }\r\n                                            onBlur={() =>\r\n                                                formValidationDispatch({\r\n                                                    \"action\": \"focus lost\",\r\n                                                    \"name\": attribute.name\r\n                                                })\r\n                                            }\r\n                                            className={clsx(props.kcInputClass)}\r\n                                            aria-invalid={displayableErrors.length !== 0}\r\n                                            disabled={attribute.readOnly}\r\n                                            autoComplete={attribute.autocomplete}\r\n                                        />\r\n                                    );\r\n                                })()}\r\n                                {displayableErrors.length !== 0 &&\r\n                                    (() => {\r\n                                        const divId = `input-error-${attribute.name}`;\r\n\r\n                                        return (\r\n                                            <>\r\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\r\n                                                <span\r\n                                                    id={divId}\r\n                                                    className={clsx(props.kcInputErrorMessageClass)}\r\n                                                    style={{\r\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\r\n                                                    }}\r\n                                                    aria-live=\"polite\"\r\n                                                >\r\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\r\n                                                </span>\r\n                                            </>\r\n                                        );\r\n                                    })()}\r\n                            </div>\r\n                        </div>\r\n                        {AfterField && <AfterField attribute={attribute} />}\r\n                    </Fragment>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n}\r\n\r\n","// Copy pasted from: https://github.com/InseeFrLab/keycloakify/blob/main/src/lib/pages/RegisterUserProfile.tsx\r\nimport { useState } from \"react\";\r\nimport { clsx } from \"keycloakify/lib/tools/clsx\";\r\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\r\nimport type { PageProps } from \"keycloakify/lib/KcProps\";\r\nimport type { KcContext } from \"../kcContext\";\r\nimport type { I18n } from \"../i18n\";\r\n\r\nexport default function RegisterUserProfile(props: PageProps<Extract<KcContext, { pageId: \"register-user-profile.ftl\" }>, I18n>) {\r\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template, ...kcProps } = props;\r\n\r\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\r\n\r\n    const { msg, msgStr } = i18n;\r\n\r\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\r\n\r\n    return (\r\n        <Template\r\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\r\n            displayMessage={messagesPerField.exists(\"global\")}\r\n            displayRequiredFields={true}\r\n            headerNode={msg(\"registerTitle\")}\r\n            formNode={\r\n                <form id=\"kc-register-form\" className={clsx(kcProps.kcFormClass)} action={url.registrationAction} method=\"post\">\r\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...kcProps} />\r\n                    {recaptchaRequired && (\r\n                        <div className=\"form-group\">\r\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\r\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <div className={clsx(kcProps.kcFormGroupClass)} style={{ \"marginBottom\": 30 }}>\r\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\r\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\r\n                                <span>\r\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\r\n                            <input\r\n                                className={clsx(\r\n                                    kcProps.kcButtonClass,\r\n                                    kcProps.kcButtonPrimaryClass,\r\n                                    kcProps.kcButtonBlockClass,\r\n                                    kcProps.kcButtonLargeClass\r\n                                )}\r\n                                type=\"submit\"\r\n                                value={msgStr(\"doRegister\")}\r\n                                disabled={!isFomSubmittable}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            }\r\n        />\r\n    );\r\n}\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["UserProfileFormFields","kcContext","onIsFormSubmittableValueChange","i18n","BeforeField","AfterField","props","advancedMsg","useFormValidation","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useEffect","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","name","value","displayableErrors","formGroupClassName","clsx","kcFormGroupClass","length","kcFormGroupErrorClass","Fragment","className","kcContentWrapperClass","id","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","undefined","onChange","event","target","onBlur","option","type","kcInputClass","disabled","readOnly","autoComplete","autocomplete","divId","kcInputErrorMessageClass","style","errorMessage","RegisterUserProfile","doFetchDefaultThemeResources","Template","kcProps","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msg","msgStr","useState","isFomSubmittable","setIsFomSubmittable","displayMessage","exists","displayRequiredFields","headerNode","formNode","kcFormClass","action","registrationAction","method","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","_objectWithoutProperties","source","excluded","key","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}